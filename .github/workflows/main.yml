name: Build, Deploy and Generate Website

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ env.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags

      - name: Create initial tag if none exists
        run: |
          if [ -z "$(git tag)" ]; then
            git tag -a v0.1.0 -m "Initial tag"
            git push --tags
          fi

      - name: Increment version
        id: version
        uses: paulhatch/semantic-version@v4
        with:
          tag_prefix: 'v'

      - name: Set up JDK 23.0.1
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '23.0.1'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package

      - name: Create executables directory
        run: mkdir executables

      - name: Rename JAR to versioned file
        run: |
          VERSION=${{ steps.version.outputs.version }}
          # Ensure the target directory contains the JAR
          mv target/*.jar target/${VERSION}.jar

      - name: Move versioned JAR to executables folder
        run: |
          VERSION=${{ steps.version.outputs.version }}
          mv target/${VERSION}.jar executables/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: executables/

      - name: Set version as environment variable
        run: echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV


      # Create and push a new Git tag for the version
      - name: Push new version tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      # Create GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.version }}
          releaseName: "JavaFX Application ${{ steps.version.outputs.version }}"
          draft: false
          prerelease: false
          artifacts: executables/*.jar


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files

      - name: Generate Download Page
        run: |
          mkdir -p download-page
          echo "<html>" > download-page/index.html
          echo "<head><title>Download JavaFX Application</title></head>" >> download-page/index.html
          echo "<body>" >> download-page/index.html
          echo "<h1>JavaFX Application</h1>" >> download-page/index.html
          echo "<p>Download the latest version of the JavaFX application:</p>" >> download-page/index.html
          # Correct URL for downloading JAR
          echo "<a href='https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/${{ steps.version.outputs.version }}.jar'>Download JAR</a>" >> download-page/index.html
          echo "</body>" >> download-page/index.html
          echo "</html>" >> download-page/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: download-page